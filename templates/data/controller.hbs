import { ControllerTemplate } from '@withjoy/server-core';
import { getManager } from 'typeorm';
import { {{ pascalCase context }}Context } from '@context';
import { {{ pascalCase model }} } from './model';
import { {{ pascalCase model }}View } from './view';

type QueryType = '{{ pascalCase model }}ById';

const query = () => 
  getManager()
    .createQueryBuilder({{ pascalCase model }}, '{{ snakeCase model }}')

export class {{ pascalCase model }}Controller extends ControllerTemplate<{{ pascalCase model }}, QueryType> {
  constructor() {
    super();
    this.loaders['{{ pascalCase model }}ById'] = this.wrapQueryInDataLoader(
      async (ids: Array<string>) => {
        const {{ camelCase model }}s = await query()
          .where('{{ snakeCase model }}.id in (:...ids)', { ids })
          .getMany();
        return this.orderResultsByIds(ids, {{ camelCase model }}s);
      });
  }

  

  public get{{ pascalCase model }}ById = async (context: {{ pascalCase context }}Context, id: string) => {
    const {{ camelCase model }} = await this.loaders['{{ pascalCase model }}ById'].load(id);
    return {{ camelCase model }} ? new {{ pascalCase model }}View(context, {{ camelCase model }}) : null;
  }

  public get{{ pascalCase model }}sByIds = async (context: {{ pascalCase context }}Context, ids: Array<string>) => {
    const {{ camelCase model }}s = await this.loaders['{{ pascalCase model }}ById'].loadMany(ids);
    return {{ camelCase model }}s.map({{ camelCase model }} => new {{ pascalCase model }}View(context, {{ camelCase model }}));
  }
}